import type { DBSchema, IDBPDatabase } from "idb";
import { type UUID } from "crypto";
import { DomainCard } from "@/types/daggerheart/daggerheart";
import IndexedDb from "./IndexedDb";

interface DataPackDB {
  uuid?: UUID; // optional so new entries get an autogenerated ID
  name: string; // name of the data pack
}

export interface DomainCardDB extends DomainCard {
  uuid?: UUID; // optional so new entries get an autogenerated ID
  dataPackUUID: UUID; // reference to the data pack this card belongs to
}

export interface Database extends DBSchema {
  data_packs: {
    key: UUID;
    value: DataPackDB;
  };
  domain_cards: {
    key: UUID;
    value: DomainCardDB;
    indexes: { byDataPackUUID: UUID };
  };
}

export const connect = async (): Promise<IndexedDb> => {
  const indexedDb = new IndexedDb("data");
  await indexedDb.connect();
  return indexedDb;
};

export const ID_KEY = "uuid";

export const setup = (db: IDBPDatabase<Database>) => {
  db.createObjectStore("data_packs", {
    autoIncrement: false,
    keyPath: ID_KEY,
  });

  const domainCardsStore = db.createObjectStore("domain_cards", {
    autoIncrement: false,
    keyPath: ID_KEY,
  });
  domainCardsStore.createIndex("byDataPackUUID", "dataPackUUID", {
    unique: false,
  });
};
